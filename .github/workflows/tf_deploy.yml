name: 'Deploy'
 
on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - main
  # pull_request:
 
jobs:
  cd:
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: false
      TF_CLI_ARGS_apply: "-auto-approve -parallelism=30"
      # Env vars for TF auth
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      # Var for PS cleanup
      MG_NAME: "jose"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Azure Login
        uses: azure/login@v1
        if: ${{ failure() }} || ${{ success() }}
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          scriptType: bash
          # addSpnToEnvironment: true
          # scriptLocation: inlineScript
          # inlineScript: |
          #   export ARM_CLIENT_ID=$servicePrincipalId
          #   export ARM_CLIENT_SECRET=$servicePrincipalKey
          #   export ARM_TENANT_ID=$tenantId
          #   export ARM_SUBSCRIPTION_ID=$subscriptionId
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1.3.0
      - name: Export Azure Login Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
      # Definitions
      - name: Terraform Init
        id: init
        run: terraform init -no-color
        working-directory: azpolicy
      - name: Terraform Apply
        id: apply
        if: ${{ success() }}
        run: terraform apply
        working-directory: azpolicy
      # - name: Clean Resources with PowerShell
      #   id: destroy
      #   uses: azure/powershell@v1
      #   if: ${{ failure() }} || ${{ success() }}
      #   with:
      #     azPSVersion: "latest"
      #     inlineScript: |
      #       # Used by GitHub Workflows to clean deployed resources quicker than tf destroy
      #       # Quicker during CD as remediation tasks must be in a terminal provisioning state (Succeeded, Canceled, Failed) before they can be deleted.
      #       Get-AzPolicyAssignment -Scope "/providers/Microsoft.Management/managementgroups/jose" | Remove-AzPolicyAssignment -Verbose
      #       Get-AzPolicySetDefinition -ManagementGroupName jose -Custom | Remove-AzPolicySetDefinition -Force -Verbose
      #       Get-AzPolicyDefinition -ManagementGroupName jose -Custom | Remove-AzPolicyDefinition -Force -Verbose
      #       Remove-AzPolicyExemption -Name "Subscription Diagnostic Settings Exemption" -Scope ("/subscriptions/" + (Get-AzContext).Subscription.Id) -Force -Verbose -ErrorAction SilentlyContinue